($wrapapplicatives)

($define $umacro
  ($uvau (name args body)
    (~$define name (~$uvau args body name)) $umacro))

($define $macro
  ($uvau (name args body)
    (~$define name (~$vau args body name)) $macro))

($macro $lambda (args body name)
  (wrap (~$uvau args body) name))

($umacro $function (name args body)
  (~$define name (list $lambda args body name)))

($umacro $comp (name args body)
  (~$define (~$symextend name "comp") (~$vau args body)))

($macro $cadr (l) ($car ($cdr l)))

($function cadr (l) (car (cdr l)))

($macro $let (defs body)
  (eval (cons (~$lambda (mapcar defs $car) body 'letbody) (mapcar defs $cadr))))

($macro $cond ((rest ifthens))
  ($let
    ((head (car ifthens)))
    ($if (eval (car head))
      (cadr head)
      ($if (nil (cdr ifthens))
        false
        (apply $cond (cdr ifthens))))))

($function fact (n)
  ($if (eq n 0)
    1
    (* n (fact (- n 1)))))
(log (fact 10))

($function pow (n p)
  ($if (eq p 0)
    1
    (* n (pow n (- p 1)))))

;; the slow way!
($function fib (n)
  ($if (lt n 2)
    1
    (+ (fib (- n 1)) (fib (- n 2)))))

;; ($logtime (nativefib 20))
($logtime (fib 20))
(log ($compile ($if (lt n 2)
    1
    (+ (fib (- n 1)) (fib (- n 2))))))

($function fibfact (n)
  ($let
    ((fibn (fib n))
     (factn (fact n)))
    (* fibn factn)))
($logtime (fibfact 20))

(log (concat "cond "($cond
  ((lt (fib 5) 150) "good")
  ((gt (fib 5) 150) "bad"))))
